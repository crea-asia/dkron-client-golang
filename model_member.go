/*
 * Dkron REST API
 *
 * You can communicate with Dkron using a RESTful JSON API over HTTP. Dkron nodes usually listen on port `8080` for API requests. All examples in this section assume that you've found a running leader at `localhost:8080`.  Dkron implements a RESTful JSON API over HTTP to communicate with software clients. Dkron listens in port `8080` by default. All examples in this section assume that you're using the default port.  Default API responses are unformatted JSON add the `pretty=true` param to format the response. 
 *
 * API version: 1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dkronclient

import (
	"encoding/json"
)

// Member A member represents a cluster member node.
type Member struct {
	// Node name
	Name *string `json:"Name,omitempty"`
	// IP Address
	Addr *string `json:"Addr,omitempty"`
	// Port number
	Port *int32 `json:"Port,omitempty"`
	// Tags asociated with this node
	Tags *map[string]string `json:"Tags,omitempty"`
	// The serf status of the node see: https://godoc.org/github.com/hashicorp/serf/serf#MemberStatus
	Status *int32 `json:"Status,omitempty"`
	// Serf protocol minimum version this node can understand or speak
	ProtocolMin *int32 `json:"ProtocolMin,omitempty"`
	// Serf protocol maximum version this node can understand or speak
	ProtocolMax *int32 `json:"ProtocolMax,omitempty"`
	// Serf protocol current version this node can understand or speak
	ProtocolCur *int32 `json:"ProtocolCur,omitempty"`
	// Serf delegate protocol minimum version this node can understand or speak
	DelegateMin *int32 `json:"DelegateMin,omitempty"`
	// Serf delegate protocol maximum version this node can understand or speak
	DelegateMax *int32 `json:"DelegateMax,omitempty"`
	// Serf delegate protocol current version this node can understand or speak
	DelegateCur *int32 `json:"DelegateCur,omitempty"`
}

// NewMember instantiates a new Member object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMember() *Member {
	this := Member{}
	return &this
}

// NewMemberWithDefaults instantiates a new Member object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberWithDefaults() *Member {
	this := Member{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Member) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Member) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Member) SetName(v string) {
	o.Name = &v
}

// GetAddr returns the Addr field value if set, zero value otherwise.
func (o *Member) GetAddr() string {
	if o == nil || o.Addr == nil {
		var ret string
		return ret
	}
	return *o.Addr
}

// GetAddrOk returns a tuple with the Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetAddrOk() (*string, bool) {
	if o == nil || o.Addr == nil {
		return nil, false
	}
	return o.Addr, true
}

// HasAddr returns a boolean if a field has been set.
func (o *Member) HasAddr() bool {
	if o != nil && o.Addr != nil {
		return true
	}

	return false
}

// SetAddr gets a reference to the given string and assigns it to the Addr field.
func (o *Member) SetAddr(v string) {
	o.Addr = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Member) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *Member) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *Member) SetPort(v int32) {
	o.Port = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Member) GetTags() map[string]string {
	if o == nil || o.Tags == nil {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetTagsOk() (*map[string]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Member) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *Member) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Member) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Member) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *Member) SetStatus(v int32) {
	o.Status = &v
}

// GetProtocolMin returns the ProtocolMin field value if set, zero value otherwise.
func (o *Member) GetProtocolMin() int32 {
	if o == nil || o.ProtocolMin == nil {
		var ret int32
		return ret
	}
	return *o.ProtocolMin
}

// GetProtocolMinOk returns a tuple with the ProtocolMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetProtocolMinOk() (*int32, bool) {
	if o == nil || o.ProtocolMin == nil {
		return nil, false
	}
	return o.ProtocolMin, true
}

// HasProtocolMin returns a boolean if a field has been set.
func (o *Member) HasProtocolMin() bool {
	if o != nil && o.ProtocolMin != nil {
		return true
	}

	return false
}

// SetProtocolMin gets a reference to the given int32 and assigns it to the ProtocolMin field.
func (o *Member) SetProtocolMin(v int32) {
	o.ProtocolMin = &v
}

// GetProtocolMax returns the ProtocolMax field value if set, zero value otherwise.
func (o *Member) GetProtocolMax() int32 {
	if o == nil || o.ProtocolMax == nil {
		var ret int32
		return ret
	}
	return *o.ProtocolMax
}

// GetProtocolMaxOk returns a tuple with the ProtocolMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetProtocolMaxOk() (*int32, bool) {
	if o == nil || o.ProtocolMax == nil {
		return nil, false
	}
	return o.ProtocolMax, true
}

// HasProtocolMax returns a boolean if a field has been set.
func (o *Member) HasProtocolMax() bool {
	if o != nil && o.ProtocolMax != nil {
		return true
	}

	return false
}

// SetProtocolMax gets a reference to the given int32 and assigns it to the ProtocolMax field.
func (o *Member) SetProtocolMax(v int32) {
	o.ProtocolMax = &v
}

// GetProtocolCur returns the ProtocolCur field value if set, zero value otherwise.
func (o *Member) GetProtocolCur() int32 {
	if o == nil || o.ProtocolCur == nil {
		var ret int32
		return ret
	}
	return *o.ProtocolCur
}

// GetProtocolCurOk returns a tuple with the ProtocolCur field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetProtocolCurOk() (*int32, bool) {
	if o == nil || o.ProtocolCur == nil {
		return nil, false
	}
	return o.ProtocolCur, true
}

// HasProtocolCur returns a boolean if a field has been set.
func (o *Member) HasProtocolCur() bool {
	if o != nil && o.ProtocolCur != nil {
		return true
	}

	return false
}

// SetProtocolCur gets a reference to the given int32 and assigns it to the ProtocolCur field.
func (o *Member) SetProtocolCur(v int32) {
	o.ProtocolCur = &v
}

// GetDelegateMin returns the DelegateMin field value if set, zero value otherwise.
func (o *Member) GetDelegateMin() int32 {
	if o == nil || o.DelegateMin == nil {
		var ret int32
		return ret
	}
	return *o.DelegateMin
}

// GetDelegateMinOk returns a tuple with the DelegateMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetDelegateMinOk() (*int32, bool) {
	if o == nil || o.DelegateMin == nil {
		return nil, false
	}
	return o.DelegateMin, true
}

// HasDelegateMin returns a boolean if a field has been set.
func (o *Member) HasDelegateMin() bool {
	if o != nil && o.DelegateMin != nil {
		return true
	}

	return false
}

// SetDelegateMin gets a reference to the given int32 and assigns it to the DelegateMin field.
func (o *Member) SetDelegateMin(v int32) {
	o.DelegateMin = &v
}

// GetDelegateMax returns the DelegateMax field value if set, zero value otherwise.
func (o *Member) GetDelegateMax() int32 {
	if o == nil || o.DelegateMax == nil {
		var ret int32
		return ret
	}
	return *o.DelegateMax
}

// GetDelegateMaxOk returns a tuple with the DelegateMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetDelegateMaxOk() (*int32, bool) {
	if o == nil || o.DelegateMax == nil {
		return nil, false
	}
	return o.DelegateMax, true
}

// HasDelegateMax returns a boolean if a field has been set.
func (o *Member) HasDelegateMax() bool {
	if o != nil && o.DelegateMax != nil {
		return true
	}

	return false
}

// SetDelegateMax gets a reference to the given int32 and assigns it to the DelegateMax field.
func (o *Member) SetDelegateMax(v int32) {
	o.DelegateMax = &v
}

// GetDelegateCur returns the DelegateCur field value if set, zero value otherwise.
func (o *Member) GetDelegateCur() int32 {
	if o == nil || o.DelegateCur == nil {
		var ret int32
		return ret
	}
	return *o.DelegateCur
}

// GetDelegateCurOk returns a tuple with the DelegateCur field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Member) GetDelegateCurOk() (*int32, bool) {
	if o == nil || o.DelegateCur == nil {
		return nil, false
	}
	return o.DelegateCur, true
}

// HasDelegateCur returns a boolean if a field has been set.
func (o *Member) HasDelegateCur() bool {
	if o != nil && o.DelegateCur != nil {
		return true
	}

	return false
}

// SetDelegateCur gets a reference to the given int32 and assigns it to the DelegateCur field.
func (o *Member) SetDelegateCur(v int32) {
	o.DelegateCur = &v
}

func (o Member) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["Name"] = o.Name
	}
	if o.Addr != nil {
		toSerialize["Addr"] = o.Addr
	}
	if o.Port != nil {
		toSerialize["Port"] = o.Port
	}
	if o.Tags != nil {
		toSerialize["Tags"] = o.Tags
	}
	if o.Status != nil {
		toSerialize["Status"] = o.Status
	}
	if o.ProtocolMin != nil {
		toSerialize["ProtocolMin"] = o.ProtocolMin
	}
	if o.ProtocolMax != nil {
		toSerialize["ProtocolMax"] = o.ProtocolMax
	}
	if o.ProtocolCur != nil {
		toSerialize["ProtocolCur"] = o.ProtocolCur
	}
	if o.DelegateMin != nil {
		toSerialize["DelegateMin"] = o.DelegateMin
	}
	if o.DelegateMax != nil {
		toSerialize["DelegateMax"] = o.DelegateMax
	}
	if o.DelegateCur != nil {
		toSerialize["DelegateCur"] = o.DelegateCur
	}
	return json.Marshal(toSerialize)
}

type NullableMember struct {
	value *Member
	isSet bool
}

func (v NullableMember) Get() *Member {
	return v.value
}

func (v *NullableMember) Set(val *Member) {
	v.value = val
	v.isSet = true
}

func (v NullableMember) IsSet() bool {
	return v.isSet
}

func (v *NullableMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMember(val *Member) *NullableMember {
	return &NullableMember{value: val, isSet: true}
}

func (v NullableMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


