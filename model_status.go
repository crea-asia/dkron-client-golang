/*
 * Dkron REST API
 *
 * You can communicate with Dkron using a RESTful JSON API over HTTP. Dkron nodes usually listen on port `8080` for API requests. All examples in this section assume that you've found a running leader at `localhost:8080`.  Dkron implements a RESTful JSON API over HTTP to communicate with software clients. Dkron listens in port `8080` by default. All examples in this section assume that you're using the default port.  Default API responses are unformatted JSON add the `pretty=true` param to format the response. 
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dkronclient

import (
	"encoding/json"
)

// Status Status represents details about the node.
type Status struct {
	// Node basic details
	Agent *map[string]interface{} `json:"agent,omitempty"`
	// Serf status
	Serf *map[string]interface{} `json:"serf,omitempty"`
	// Tags asociated with this node
	Tags *map[string]interface{} `json:"tags,omitempty"`
}

// NewStatus instantiates a new Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus() *Status {
	this := Status{}
	return &this
}

// NewStatusWithDefaults instantiates a new Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusWithDefaults() *Status {
	this := Status{}
	return &this
}

// GetAgent returns the Agent field value if set, zero value otherwise.
func (o *Status) GetAgent() map[string]interface{} {
	if o == nil || o.Agent == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Agent
}

// GetAgentOk returns a tuple with the Agent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetAgentOk() (*map[string]interface{}, bool) {
	if o == nil || o.Agent == nil {
		return nil, false
	}
	return o.Agent, true
}

// HasAgent returns a boolean if a field has been set.
func (o *Status) HasAgent() bool {
	if o != nil && o.Agent != nil {
		return true
	}

	return false
}

// SetAgent gets a reference to the given map[string]interface{} and assigns it to the Agent field.
func (o *Status) SetAgent(v map[string]interface{}) {
	o.Agent = &v
}

// GetSerf returns the Serf field value if set, zero value otherwise.
func (o *Status) GetSerf() map[string]interface{} {
	if o == nil || o.Serf == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Serf
}

// GetSerfOk returns a tuple with the Serf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetSerfOk() (*map[string]interface{}, bool) {
	if o == nil || o.Serf == nil {
		return nil, false
	}
	return o.Serf, true
}

// HasSerf returns a boolean if a field has been set.
func (o *Status) HasSerf() bool {
	if o != nil && o.Serf != nil {
		return true
	}

	return false
}

// SetSerf gets a reference to the given map[string]interface{} and assigns it to the Serf field.
func (o *Status) SetSerf(v map[string]interface{}) {
	o.Serf = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Status) GetTags() map[string]interface{} {
	if o == nil || o.Tags == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetTagsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Status) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]interface{} and assigns it to the Tags field.
func (o *Status) SetTags(v map[string]interface{}) {
	o.Tags = &v
}

func (o Status) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Agent != nil {
		toSerialize["agent"] = o.Agent
	}
	if o.Serf != nil {
		toSerialize["serf"] = o.Serf
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


