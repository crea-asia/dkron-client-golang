/*
 * Dkron REST API
 *
 * You can communicate with Dkron using a RESTful JSON API over HTTP. Dkron nodes usually listen on port `8080` for API requests. All examples in this section assume that you've found a running leader at `localhost:8080`.  Dkron implements a RESTful JSON API over HTTP to communicate with software clients. Dkron listens in port `8080` by default. All examples in this section assume that you're using the default port.  Default API responses are unformatted JSON add the `pretty=true` param to format the response. 
 *
 * API version: 3.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dkronclient

import (
	"encoding/json"
	"time"
)

// Job A Job represents a scheduled task to execute.
type Job struct {
	// Name for the job.
	Name string `json:"name"`
	// Nice name for the job. Optional.
	Displayname *string `json:"displayname,omitempty"`
	// Cron expression for the job.
	Schedule string `json:"schedule"`
	// Timezone where the job will be executed. By default and when field is set to empty string, the job will run in local time.
	Timezone *string `json:"timezone,omitempty"`
	// Owner of the job
	Owner *string `json:"owner,omitempty"`
	// Email of the owner
	OwnerEmail *string `json:"owner_email,omitempty"`
	// Number of successful executions
	SuccessCount *int32 `json:"success_count,omitempty"`
	// Number of failed executions
	ErrorCount *int32 `json:"error_count,omitempty"`
	// Last time this job executed successfully
	LastSuccess *time.Time `json:"last_success,omitempty"`
	// Last time this job failed
	LastError *time.Time `json:"last_error,omitempty"`
	// Disabled state of the job
	Disabled *bool `json:"disabled,omitempty"`
	// Target nodes tags of this job
	Tags *map[string]string `json:"tags,omitempty"`
	// Extra metadata tags for this job
	Metadata *map[string]string `json:"metadata,omitempty"`
	// Number of times to retry a failed job execution
	Retries *int32 `json:"retries,omitempty"`
	// The name/id of the job that will trigger the execution of this job
	ParentJob *string `json:"parent_job,omitempty"`
	// Array containing the jobs that depends on this one
	DependentJobs *[]string `json:"dependent_jobs,omitempty"`
	// Processor plugins used to process executions results of this job
	Processors *map[string]map[string]string `json:"processors,omitempty"`
	// Concurrency policy for the job allow/forbid
	Concurrency *string `json:"concurrency,omitempty"`
	// Executor plugin used to run the job
	Executor *string `json:"executor,omitempty"`
	// Executor plugin parameters
	ExecutorConfig *map[string]string `json:"executor_config,omitempty"`
	// Status of the job
	Status *string `json:"status,omitempty"`
}

// NewJob instantiates a new Job object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJob(name string, schedule string, ) *Job {
	this := Job{}
	this.Name = name
	this.Schedule = schedule
	return &this
}

// NewJobWithDefaults instantiates a new Job object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobWithDefaults() *Job {
	this := Job{}
	return &this
}

// GetName returns the Name field value
func (o *Job) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Job) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Job) SetName(v string) {
	o.Name = v
}

// GetDisplayname returns the Displayname field value if set, zero value otherwise.
func (o *Job) GetDisplayname() string {
	if o == nil || o.Displayname == nil {
		var ret string
		return ret
	}
	return *o.Displayname
}

// GetDisplaynameOk returns a tuple with the Displayname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDisplaynameOk() (*string, bool) {
	if o == nil || o.Displayname == nil {
		return nil, false
	}
	return o.Displayname, true
}

// HasDisplayname returns a boolean if a field has been set.
func (o *Job) HasDisplayname() bool {
	if o != nil && o.Displayname != nil {
		return true
	}

	return false
}

// SetDisplayname gets a reference to the given string and assigns it to the Displayname field.
func (o *Job) SetDisplayname(v string) {
	o.Displayname = &v
}

// GetSchedule returns the Schedule field value
func (o *Job) GetSchedule() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *Job) GetScheduleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *Job) SetSchedule(v string) {
	o.Schedule = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *Job) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *Job) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *Job) SetTimezone(v string) {
	o.Timezone = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Job) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Job) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Job) SetOwner(v string) {
	o.Owner = &v
}

// GetOwnerEmail returns the OwnerEmail field value if set, zero value otherwise.
func (o *Job) GetOwnerEmail() string {
	if o == nil || o.OwnerEmail == nil {
		var ret string
		return ret
	}
	return *o.OwnerEmail
}

// GetOwnerEmailOk returns a tuple with the OwnerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetOwnerEmailOk() (*string, bool) {
	if o == nil || o.OwnerEmail == nil {
		return nil, false
	}
	return o.OwnerEmail, true
}

// HasOwnerEmail returns a boolean if a field has been set.
func (o *Job) HasOwnerEmail() bool {
	if o != nil && o.OwnerEmail != nil {
		return true
	}

	return false
}

// SetOwnerEmail gets a reference to the given string and assigns it to the OwnerEmail field.
func (o *Job) SetOwnerEmail(v string) {
	o.OwnerEmail = &v
}

// GetSuccessCount returns the SuccessCount field value if set, zero value otherwise.
func (o *Job) GetSuccessCount() int32 {
	if o == nil || o.SuccessCount == nil {
		var ret int32
		return ret
	}
	return *o.SuccessCount
}

// GetSuccessCountOk returns a tuple with the SuccessCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetSuccessCountOk() (*int32, bool) {
	if o == nil || o.SuccessCount == nil {
		return nil, false
	}
	return o.SuccessCount, true
}

// HasSuccessCount returns a boolean if a field has been set.
func (o *Job) HasSuccessCount() bool {
	if o != nil && o.SuccessCount != nil {
		return true
	}

	return false
}

// SetSuccessCount gets a reference to the given int32 and assigns it to the SuccessCount field.
func (o *Job) SetSuccessCount(v int32) {
	o.SuccessCount = &v
}

// GetErrorCount returns the ErrorCount field value if set, zero value otherwise.
func (o *Job) GetErrorCount() int32 {
	if o == nil || o.ErrorCount == nil {
		var ret int32
		return ret
	}
	return *o.ErrorCount
}

// GetErrorCountOk returns a tuple with the ErrorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetErrorCountOk() (*int32, bool) {
	if o == nil || o.ErrorCount == nil {
		return nil, false
	}
	return o.ErrorCount, true
}

// HasErrorCount returns a boolean if a field has been set.
func (o *Job) HasErrorCount() bool {
	if o != nil && o.ErrorCount != nil {
		return true
	}

	return false
}

// SetErrorCount gets a reference to the given int32 and assigns it to the ErrorCount field.
func (o *Job) SetErrorCount(v int32) {
	o.ErrorCount = &v
}

// GetLastSuccess returns the LastSuccess field value if set, zero value otherwise.
func (o *Job) GetLastSuccess() time.Time {
	if o == nil || o.LastSuccess == nil {
		var ret time.Time
		return ret
	}
	return *o.LastSuccess
}

// GetLastSuccessOk returns a tuple with the LastSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetLastSuccessOk() (*time.Time, bool) {
	if o == nil || o.LastSuccess == nil {
		return nil, false
	}
	return o.LastSuccess, true
}

// HasLastSuccess returns a boolean if a field has been set.
func (o *Job) HasLastSuccess() bool {
	if o != nil && o.LastSuccess != nil {
		return true
	}

	return false
}

// SetLastSuccess gets a reference to the given time.Time and assigns it to the LastSuccess field.
func (o *Job) SetLastSuccess(v time.Time) {
	o.LastSuccess = &v
}

// GetLastError returns the LastError field value if set, zero value otherwise.
func (o *Job) GetLastError() time.Time {
	if o == nil || o.LastError == nil {
		var ret time.Time
		return ret
	}
	return *o.LastError
}

// GetLastErrorOk returns a tuple with the LastError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetLastErrorOk() (*time.Time, bool) {
	if o == nil || o.LastError == nil {
		return nil, false
	}
	return o.LastError, true
}

// HasLastError returns a boolean if a field has been set.
func (o *Job) HasLastError() bool {
	if o != nil && o.LastError != nil {
		return true
	}

	return false
}

// SetLastError gets a reference to the given time.Time and assigns it to the LastError field.
func (o *Job) SetLastError(v time.Time) {
	o.LastError = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *Job) GetDisabled() bool {
	if o == nil || o.Disabled == nil {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDisabledOk() (*bool, bool) {
	if o == nil || o.Disabled == nil {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *Job) HasDisabled() bool {
	if o != nil && o.Disabled != nil {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *Job) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Job) GetTags() map[string]string {
	if o == nil || o.Tags == nil {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTagsOk() (*map[string]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Job) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *Job) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Job) GetMetadata() map[string]string {
	if o == nil || o.Metadata == nil {
		var ret map[string]string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetMetadataOk() (*map[string]string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Job) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]string and assigns it to the Metadata field.
func (o *Job) SetMetadata(v map[string]string) {
	o.Metadata = &v
}

// GetRetries returns the Retries field value if set, zero value otherwise.
func (o *Job) GetRetries() int32 {
	if o == nil || o.Retries == nil {
		var ret int32
		return ret
	}
	return *o.Retries
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetRetriesOk() (*int32, bool) {
	if o == nil || o.Retries == nil {
		return nil, false
	}
	return o.Retries, true
}

// HasRetries returns a boolean if a field has been set.
func (o *Job) HasRetries() bool {
	if o != nil && o.Retries != nil {
		return true
	}

	return false
}

// SetRetries gets a reference to the given int32 and assigns it to the Retries field.
func (o *Job) SetRetries(v int32) {
	o.Retries = &v
}

// GetParentJob returns the ParentJob field value if set, zero value otherwise.
func (o *Job) GetParentJob() string {
	if o == nil || o.ParentJob == nil {
		var ret string
		return ret
	}
	return *o.ParentJob
}

// GetParentJobOk returns a tuple with the ParentJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetParentJobOk() (*string, bool) {
	if o == nil || o.ParentJob == nil {
		return nil, false
	}
	return o.ParentJob, true
}

// HasParentJob returns a boolean if a field has been set.
func (o *Job) HasParentJob() bool {
	if o != nil && o.ParentJob != nil {
		return true
	}

	return false
}

// SetParentJob gets a reference to the given string and assigns it to the ParentJob field.
func (o *Job) SetParentJob(v string) {
	o.ParentJob = &v
}

// GetDependentJobs returns the DependentJobs field value if set, zero value otherwise.
func (o *Job) GetDependentJobs() []string {
	if o == nil || o.DependentJobs == nil {
		var ret []string
		return ret
	}
	return *o.DependentJobs
}

// GetDependentJobsOk returns a tuple with the DependentJobs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDependentJobsOk() (*[]string, bool) {
	if o == nil || o.DependentJobs == nil {
		return nil, false
	}
	return o.DependentJobs, true
}

// HasDependentJobs returns a boolean if a field has been set.
func (o *Job) HasDependentJobs() bool {
	if o != nil && o.DependentJobs != nil {
		return true
	}

	return false
}

// SetDependentJobs gets a reference to the given []string and assigns it to the DependentJobs field.
func (o *Job) SetDependentJobs(v []string) {
	o.DependentJobs = &v
}

// GetProcessors returns the Processors field value if set, zero value otherwise.
func (o *Job) GetProcessors() map[string]map[string]string {
	if o == nil || o.Processors == nil {
		var ret map[string]map[string]string
		return ret
	}
	return *o.Processors
}

// GetProcessorsOk returns a tuple with the Processors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetProcessorsOk() (*map[string]map[string]string, bool) {
	if o == nil || o.Processors == nil {
		return nil, false
	}
	return o.Processors, true
}

// HasProcessors returns a boolean if a field has been set.
func (o *Job) HasProcessors() bool {
	if o != nil && o.Processors != nil {
		return true
	}

	return false
}

// SetProcessors gets a reference to the given map[string]map[string]string and assigns it to the Processors field.
func (o *Job) SetProcessors(v map[string]map[string]string) {
	o.Processors = &v
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise.
func (o *Job) GetConcurrency() string {
	if o == nil || o.Concurrency == nil {
		var ret string
		return ret
	}
	return *o.Concurrency
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetConcurrencyOk() (*string, bool) {
	if o == nil || o.Concurrency == nil {
		return nil, false
	}
	return o.Concurrency, true
}

// HasConcurrency returns a boolean if a field has been set.
func (o *Job) HasConcurrency() bool {
	if o != nil && o.Concurrency != nil {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given string and assigns it to the Concurrency field.
func (o *Job) SetConcurrency(v string) {
	o.Concurrency = &v
}

// GetExecutor returns the Executor field value if set, zero value otherwise.
func (o *Job) GetExecutor() string {
	if o == nil || o.Executor == nil {
		var ret string
		return ret
	}
	return *o.Executor
}

// GetExecutorOk returns a tuple with the Executor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetExecutorOk() (*string, bool) {
	if o == nil || o.Executor == nil {
		return nil, false
	}
	return o.Executor, true
}

// HasExecutor returns a boolean if a field has been set.
func (o *Job) HasExecutor() bool {
	if o != nil && o.Executor != nil {
		return true
	}

	return false
}

// SetExecutor gets a reference to the given string and assigns it to the Executor field.
func (o *Job) SetExecutor(v string) {
	o.Executor = &v
}

// GetExecutorConfig returns the ExecutorConfig field value if set, zero value otherwise.
func (o *Job) GetExecutorConfig() map[string]string {
	if o == nil || o.ExecutorConfig == nil {
		var ret map[string]string
		return ret
	}
	return *o.ExecutorConfig
}

// GetExecutorConfigOk returns a tuple with the ExecutorConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetExecutorConfigOk() (*map[string]string, bool) {
	if o == nil || o.ExecutorConfig == nil {
		return nil, false
	}
	return o.ExecutorConfig, true
}

// HasExecutorConfig returns a boolean if a field has been set.
func (o *Job) HasExecutorConfig() bool {
	if o != nil && o.ExecutorConfig != nil {
		return true
	}

	return false
}

// SetExecutorConfig gets a reference to the given map[string]string and assigns it to the ExecutorConfig field.
func (o *Job) SetExecutorConfig(v map[string]string) {
	o.ExecutorConfig = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Job) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Job) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Job) SetStatus(v string) {
	o.Status = &v
}

func (o Job) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Displayname != nil {
		toSerialize["displayname"] = o.Displayname
	}
	if true {
		toSerialize["schedule"] = o.Schedule
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.OwnerEmail != nil {
		toSerialize["owner_email"] = o.OwnerEmail
	}
	if o.SuccessCount != nil {
		toSerialize["success_count"] = o.SuccessCount
	}
	if o.ErrorCount != nil {
		toSerialize["error_count"] = o.ErrorCount
	}
	if o.LastSuccess != nil {
		toSerialize["last_success"] = o.LastSuccess
	}
	if o.LastError != nil {
		toSerialize["last_error"] = o.LastError
	}
	if o.Disabled != nil {
		toSerialize["disabled"] = o.Disabled
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Retries != nil {
		toSerialize["retries"] = o.Retries
	}
	if o.ParentJob != nil {
		toSerialize["parent_job"] = o.ParentJob
	}
	if o.DependentJobs != nil {
		toSerialize["dependent_jobs"] = o.DependentJobs
	}
	if o.Processors != nil {
		toSerialize["processors"] = o.Processors
	}
	if o.Concurrency != nil {
		toSerialize["concurrency"] = o.Concurrency
	}
	if o.Executor != nil {
		toSerialize["executor"] = o.Executor
	}
	if o.ExecutorConfig != nil {
		toSerialize["executor_config"] = o.ExecutorConfig
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableJob struct {
	value *Job
	isSet bool
}

func (v NullableJob) Get() *Job {
	return v.value
}

func (v *NullableJob) Set(val *Job) {
	v.value = val
	v.isSet = true
}

func (v NullableJob) IsSet() bool {
	return v.isSet
}

func (v *NullableJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJob(val *Job) *NullableJob {
	return &NullableJob{value: val, isSet: true}
}

func (v NullableJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


